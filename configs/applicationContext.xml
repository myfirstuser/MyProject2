<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">
	
	<!-- jndi数据源 
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/oracle</value>
		</property>
	</bean> -->
	
	<!-- 创建连接池  配置连接池的属性值 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
           <property name="driverClass" value="oracle.jdbc.OracleDriver"></property>
         <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl"></property>
         <property name="user" value="system"></property>
         <property name="password" value="admin"></property>
         <!--连接池中保留的最小连接数。-->            
    <property name="minPoolSize" value="10" />        
    <!--连接池中保留的最大连接数。Default: 15 -->         
    <property name="maxPoolSize" value="100" />        
    <!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->               
    <property name="maxIdleTime" value="1800" />        
    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->               
    <property name="acquireIncrement" value="3" />        
    <property name="maxStatements" value="1000" />         
    <property name="initialPoolSize" value="10" />          
    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->       
    <property name="idleConnectionTestPeriod" value="60" />          
    <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->       
    <property name="acquireRetryAttempts" value="30" />         
    <property name="breakAfterAcquireFailure" value="true" />             
    <property name="testConnectionOnCheckout" value="false" />
    </bean>

	<!-- sessionFactory创建 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 
			<property name="configLocation"
				value="classpath:hibernate.cfg.xml">
			</property>
		-->
		<!-- 引用数据源 -->
		<property name="dataSource" ref="dataSource"></property> 
		<!-- hibernate配置文件中的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
		 		<prop key="hibernate.show_sql">true</prop>
		 		<prop key="hibernate.format_sql">true</prop>
		 		<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
			</props>
		</property>
		<!-- hibernate配置中的映射 -->
		<!-- <property name="mappingResources">
			<list>
				<value>cn/zr/entity/Dept.hbm.xml</value>
				<value>cn/zr/entity/Emp.hbm.xml</value>
			</list>
		</property> -->
		<!-- 优化配置映射
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:cn/zr/entity</value>
			</list>
		</property> -->
		<!-- 注解方式配置实体类映射  扫描包 -->
		<property name="packagesToScan">
			<list>
				<value>cn.zr.entity</value>
			</list>
		</property>
	</bean>
	
	<!-- 声明式事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 
		<tx:annotation-driven transaction-manager="transactionManager" />
	 -->
	<!-- 事务管理器的规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 对get/load/search开头的方法要求只读事务 -->
			<tx:method name="get*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<!-- 对其它方法要求事务处理提交 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
			<!-- 关于事务回滚的问题:
				由于Spring与Hibernate类型的Dao已经整合,所以在面向切面编程的过程中
				只有当Spring感知到异常以后才能被切面拦截,并执行回滚操作,而实际情况是
				我们往往需要拦截一些继承runtimeException的异常转而编程Exception的
				异常,然而这个恰恰违反了Spring只能拦截runtimeException的初衷,因此
				我们必须在配置文件中明确指定,拦截到哪种异常Spring需要做回滚操作
				rollback-for的作用就是明确指定需要回滚的拦截异常名
			<tx:method name="*" propagation="REQUIRED" rollback-for="DBLinkException"/>
			-->
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 事务切面 -->
		<!-- 切入点 -->
		<!-- execution表达式:(modifies-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?) -->
		<!-- 公共的方法，任意返回值，无声明类型，cn.zr.service包下及子目录下任意类的任意方法(参数无限制) -->
		<aop:pointcut id="txPointcut"
			expression="execution(public * cn.zr.dao..*.*(..))" />
		<!-- 切入点/增强类 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 支持注解配置 -->
	<context:annotation-config/>
	<context:component-scan base-package="cn.zr.dao,cn.zr.entity,cn.zr.service,cn.zr.action"></context:component-scan>
	 
	 <bean id="DeptJson" class="cn.zr.action.DeptJson" scope="prototype">
	 	<property name="deptService">
	 		<bean id="deptService" class="cn.zr.service.impl.DeptServiceImpl">
	 		</bean>
	 	</property>
	 </bean>
	 
</beans>